/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_f77676c4 (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

// View at https://supabase.com/dashboard/project/jrgnligmsdjnedotytec/database/tables

// This file provides a simple key-value interface for storing demo data.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () => createClient(
  Deno.env.get("SUPABASE_URL"),
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_f77676c4").upsert({
    key,
    value
  });
  if (error) {
    throw new Error(error.message);
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_f77676c4").select("value").eq("key", key).maybeSingle();
  if (error) {
    throw new Error(error.message);
  }
  return data?.value;
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_f77676c4").delete().eq("key", key);
  if (error) {
    throw new Error(error.message);
  }
};

// Search for key-value pairs by prefix. Returns objects with key and value
export const getByPrefix = async (prefix: string): Promise<Array<{ key: string; value: any }>> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_f77676c4").select("key, value").like("key", prefix + "%");
  if (error) {
    throw new Error(error.message);
  }
  return data ?? [];
};


